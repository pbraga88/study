2.4 Boolean Algebra and Computer Logic
======================================
Conjunction		-> Duas condições devem ser atendidas
|if (a==1 && b==1)
|	cout << "True" << emdl;
O operador da 'Conjunction' é &&. Trata-se de um operador binário, com menor 
prioridade do que os operadores de comparação, portanto a seguinte linha
pode ser expressada sem a necessidade do uso de parênteses:
|counter>0 && value==100

Disjunction		-> Apenas uma condição precisa ser atendida
|if (a==1 || b==1)
|	cout <<"True" << endl;
O operador da 'Disjunction' é ||. Trata-se também de um operador binário com 
menor prioridade do que && (bem como '+' em relação à '*')

logical negation	-> Este operador unário é representado por '!'. Ele torna 
'true' em 'false' e 'false' em 'true'. Sua prioridade é muito alta, assim como 
os operadores de incremento e decremento

**************************************************************
A lei de Morgan:											 *
A negação de uma conjunção é igual a disjunção das negações:  *
!(a && b) = !a || !b;										 *
															 *
A negação de uma disjunção é igual conjunção das negações:	 *
!(a || b) = !a && !b;										 *
**************************************************************

bitwise operators	-> São os operadores (4) que permitem manipular bit únicos:
- & bitwise conjunction
- | bitwise disjunction
- ~ bitwise negation
- ^ bitwise exclusive or

Importante: Os argumentos dessas operações devem ser inteiros (int, long, short ou char); não se deve usar 
ponto flutuante (float)

Operações lógicas e binárias
Dado:
	i = 00000000 00000000 00000000 00001111
	j = 00000000 00000000 00000000 00010110
	int logic = i && j; // = 00000000 00000000 00000000 00000001
À operação de conjunção acima, apenas interessa saber se os números são inteiros positivios ou não. O resultado será 
sempre booleano true (1) ou booleano false (0) dependendo das variáveis. 
Já a operação de bit (bitwise), vai bit a bit, portanto a linha de código abaixo resulta em um valor diferente:
	int bit = i & j;// = 00000000 00000000 00000000 00000110
Utilizando os operadores de negação !(lógico) e ~(bitwise), temos:
	int logicneg = !i;// = 00000000 00000000 00000000 00000000
	int bitneg = ~i;// = 11111111 11111111 11111111 11110000
Õ valor decimal de i será -16, após a operação bitiwise acima, pois trata-se de um complemento de dois

Formas abreviadas:
x=x|y <=> x|=y
x=x&y <=> x&=y
x=x^y <=> x^=y

Bitmask
dada uma variável de 32 bits, na qual apenas o terceiro bit deve ser considerado para leitura e escrita:
	FlagRegister: 00000000 00000000 00000000 0000x000
O terceiro bit pode ser escrito como: 2^3=8
Portanto, a máscara deve ser:
	int mask=8; // em binário: 00000000 00000000 00000000 00001000
Para apenas ler o bit, pode-se:
|	if(FlagRegister & mask)
|		cout<<"bit 3 is set"<<endl;
|	else
|		cout<<"bit 3 is not set"<<endl;
Para resetar o tereceiro bit, pode-e fazer conjunção de bit do FlagRegister com uma negação da máscara (mask):
	FlagRegister = FlagRegister & ~mask;
ou, simplesmente:
	FlagRegister &= mask;
Já para o set do terceiro bit, pode-se fazer uma disjunção de bit do FlagRegister com a máscara:
	FlagRegister = FlagRegister | mask;
ou, simplesmente:
	FlagRegister |= mask;
Para inverter (ou negar) o valor do terceiro bit, pode-se utilizar a operação XOR:
	FlagRegister = FlagRegister ^ mask;
ou, simplesmente:
	FlagRegister ^= mask;


Shifting
O shifting pode apenas ser feito com valores inteiros. Como o computador opera na base 2, mover uma casa para esquerda, 
significa multiplicar o valor por 2, assim como mover uma casa para direita, significa dividir por 2.
O shift pode ser:
  Lógico: Todos os bits são movimentados par o lado escolhido; Este tipo de shift é aplicado quando utilizadas 
unsigned integers.
  Aritmético: Caso o shift omita o sign bit - Em complemento de dois, o bit mais alto (ou mais a esquerda) é o sign bit; 
caso ele seja igual à '1', o valor é tratado como negativo; Isto significa que o shift aritmético não pode alterar o sinal 
do valor "shifted".
Os operadores do shift são << >>, esquerda e direita, respectivamente. O argumento à esquerda é um valor inteiro cujo os 
bits passarão pelo shift, e o argumento a direita é o tamanho de tal shif, ou seja, quantas casas os bits hão de andar.
*** A prioridade deste operador é muito alta!