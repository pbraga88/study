6.6 - The const keyword
=======================
As variáveis constantes são protegidas, no momento da compilação, para que seus valores 
não sejam alterados. :
|	const int size1 = 100;
|	int const size2 = 100;

Ponteiros também podem ser declarados como constantes:
|	int arr[5] = {1, 2, 4, 8, 16};
|	int *const iptr = arr + 2;
|	char *const cptr = "Why?";
Deve-se manter sempre estilo <tipo_de_variável> *<nome_da_variável>. 
Vale ressaltar também que os ponteiros não podem ser alterados, mas as variáveis para 
onde eles apontam podem:
|	*ptr = 0;
|	*ptr = 'T';

Ponteiros constantes NÃO são equivalentes a ponteiros para constantes:
|	int arr[5] = {1, 2, 4, 8, 16};
|	const int *iptr = arr + 2;
|	const char *cptr = "Why?";
Agora, os endereços podem ser alterados, mas não é possível alterar o valor dereferenciando 
o ponteiro.
Correct:
|	--iptr; 
|	++cptr;
Incorrect:
|	*iptr = 0;
|	*cptr = 'T';


****Classes com variáveis constantes
Qualquer classe pode ter seus campos declarados como constantes. Isso significa que tal 
campo não poderá ser alterado durante a existência do objeto. 
É importante ressaltar que cada objeto tera sua cópia exclusiva do campo constante e que 
ele deve ser inicializado no construtor da classe:
|	class Class {
|	private:
|		const int field;
|	public:
|		Class(int n) : field(n) { };
|		Class(Class &c) : field(0) { };
|		Class(void) : field(1) { };
|	};

Objetos constantes também são possíveis dentro do C++, contudo, ao ser declarado dessa 
forma torna-se proibido modificar qualquer campo ou invocar funções membros deste 
objeto

Funções membro também podem ser declaradas constantes:
	type name(parameters) const; in declarations
	type name(parameters) const { … } in definitions
Note que a palavra-chave 'const' deve vir depois da declaração dos parâmetros:
|	class Class{
|	public:
|		int field;
|		Class(int n) : field(n){};
|		Class(Class &c) : field(0){};
|		Class(void) : field(1){};
|		void  print_field() const{
|			cout<<field<<endl;
|		}
|	};