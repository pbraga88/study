******* CHAPTER 2 - DEVICE DRIVER BASIS *******
Load Module
===========
insmod <module>		-> Carrega apenas o modulo especificado 
modprobe <module>	-> Carrega o modulo e suas dependências

Load modules at boot
====================
Create the file
$ /etc/modulesload.d/<filename>.conf

Create the .conf file:
#this line is a comment
uio
iwlwifi

Unload Module
=============
rmmod <module>		-> Remove Module
rmmod -f <module>	-> Force Remove Module
modprobe -r <module>	-> Remove module and unused dependencies

lsmod	-> List modules

object dump
===========
$ objdump -h <module-name>.ko
Important sections from the dump:
.modinfo	-> Store information about the module
.init.text	-> Stores code prefixed with the __init macro

$ objdump <module-name>.ko -d -j .modinfo	-> To see info like author, license, etc

Error Handling
==============
The error codes are defined under:
include/uapi/asm-generic/errno-base.h
include/uapi/asm-generic/errno.h

****

Caso erro retornado seja uma resposta a uma chamada de sistema (system call: open, read, ioctl, mmap), o valor será automaticamente atribuído à variável global em usser=space 'errno'. Deste modo, o usupario pode utilizar 'strerror(errno)' para traduzir o erro em uma string legível:

#include <errno.h>	/* to access errno global variable */
#include <string.h>
[...]
if(write(fd, buf, 1) < 0){
	printf("something gone wrong! %s\n" strerror(errno));
}
[...]

****

Quando um erro é encontrado, tudo até onde o erro ocorre deve ser desfeito. E o jeito usual para se fazer isso, é usando 'goto':

[...]
ptr = kmalloc(sizeof (device_t));
if(!ptr){
	ret = -ENOMEM;
	goto err_alloc;
}
dev = init(&ptr);

if(dev){
	ret = -EIO;
	goto err_init;
}
return 0;

err_init:
		free(ptr);
err_alloc:
		return ret;

