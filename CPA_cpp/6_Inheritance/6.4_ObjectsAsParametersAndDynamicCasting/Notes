6.4 - Objects as parameters and dynamic casting
===============================================
Qualquer objeto pode ser usado como parâmetro de uma função
|	class Pet{
|		protected:
|			string name;
|		public:
|			void NameMe(string name){
|				this->name = name;
|			}
|			void MakeSound(void){
|				cout<<name<<" says: no comments"<<endl;
|			}
|			void WhatIsMyName(void){
|				cout<<"My name is: "<<name<<endl;
|			}
|	};
|	void PlayWithPetByPointer(string name, Pet *pet){
|		pet->NameMe(name);
|		pet->MakeSound();
|	}
|	void PlayWithPetByReference(string name, Pet &pet){
|		pet.NameMe(name);
|		pet.MakeSound();
|	}
|	int main(void){
|		Pet *p1 = new Pet;
|		Pet p2;
|		PlayWithPetByPointer("anonymous", p1);
|		PlayWithPetByReference("no_name", p2);
|
|		return 0;
|	}

O operador dinâmico, é utilizado para verifcar se os objetos são do mesmo tipo:
Com ponteiro:
	dynamic_cast<pointer_type>(pointer_to_object)
Com referência:
	dynamic_cast<reference_type>(reference_to_object)
	